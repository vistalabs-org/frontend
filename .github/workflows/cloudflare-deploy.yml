name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci
        
      - name: Debug environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Working directory: $(pwd)"
          ls -la
          echo "ESLint config:"
          cat .eslintrc.json

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          NEXT_PUBLIC_GAS_MANAGER_POLICY_ID: ${{ secrets.GAS_MANAGER_POLICY_ID }}
          SEPOLIA_URL: ${{ secrets.SEPOLIA_URL }}
        
      # If you have tests, uncomment and adjust the following step
      # - name: Run tests
      #   run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check file structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Checking package-lock.json:"
          if [ -f "package-lock.json" ]; then
            echo "✅ package-lock.json exists"
          else
            echo "❌ package-lock.json not found!"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # Cache build output to speed up subsequent builds
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          NEXT_PUBLIC_GAS_MANAGER_POLICY_ID: ${{ secrets.GAS_MANAGER_POLICY_ID }}
          SEPOLIA_URL: ${{ secrets.SEPOLIA_URL }}

      - name: Create Cloudflare worker for Next.js routing
        run: |
          mkdir -p .next/workers-site
          cat > .next/workers-site/index.js << 'EOL'
          import { getAssetFromKV } from '@cloudflare/kv-asset-handler';

          addEventListener('fetch', event => {
            event.respondWith(handleEvent(event));
          });

          async function handleEvent(event) {
            try {
              // Try to serve static assets first
              return await getAssetFromKV(event, {
                mapRequestToAsset: req => {
                  const url = new URL(req.url);
                  // If the URL has a file extension, try to serve it as a static asset
                  if (url.pathname.includes('.')) {
                    return req;
                  }
                  
                  // Otherwise, return index.html for client-side routing
                  if (!url.pathname.startsWith('/_next/')) {
                    return new Request(`${url.origin}/index.html`, req);
                  }
                  
                  return req;
                }
              });
            } catch (e) {
              // Fall back to serving index.html
              return new Response('Not Found', { status: 404 });
            }
          }
          EOL
          
          # Create package.json for worker dependencies
          cat > .next/workers-site/package.json << 'EOL'
          {
            "name": "next-cloudflare-worker",
            "version": "1.0.0",
            "main": "index.js",
            "dependencies": {
              "@cloudflare/kv-asset-handler": "^0.3.0"
            }
          }
          EOL
          
          # Install dependencies for the worker
          cd .next/workers-site && npm install
          
          echo "Created Next.js worker script with dependencies"

      - name: Install Wrangler globally
        run: npm install -g wrangler

      - name: List built files
        run: |
          echo "Content of .next directory:"
          ls -la .next
          echo "Content of .next/static directory:"
          ls -la .next/static || echo "Static directory does not exist"
          echo "Size of .next directory:"
          du -sh .next

      - name: Clean cache directories
        run: |
          rm -rf .next/cache
          echo "Removed cache directory to prevent asset size errors"

      - name: Create Next.js configuration for Cloudflare
        run: |
          # Create config for Next.js on Cloudflare Pages
          cat > next.config.js << 'EOL'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            reactStrictMode: true,
            output: 'export',
            images: {
              unoptimized: true,
            },
            trailingSlash: true,
          };
          
          module.exports = nextConfig;
          EOL
          
          # Rebuild with the new config
          npm run build
          
          # Make sure index.html is at the root level for Cloudflare Pages
          cp .next/index.html .next/index.html || echo "No index.html found"

      - name: Create wrangler.toml with specific excludes
        run: |
          cat > wrangler.toml << 'EOL'
          name = "market"
          compatibility_date = "2025-03-29"
          
          # Required configuration for Pages
          pages_build_output_dir = ".next"
          
          [build.environment]
          NODE_VERSION = "20"
          EOL
          
          echo "Created wrangler.toml:"
          cat wrangler.toml

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Deploying to Cloudflare Pages..."
          # First try to create the project if it doesn't exist
          echo "Checking if project exists, creating if needed..."
          wrangler pages project create market --production-branch=main || echo "Project may already exist or there was an error"
          
          # Create a _routes.json file for Next.js routing
          cat > .next/_routes.json << 'EOL'
          {
            "version": 1,
            "include": ["/*"],
            "exclude": []
          }
          EOL
          
          # Create a functions folder for Next.js Edge functions
          mkdir -p .next/functions
          cat > .next/functions/_middleware.js << 'EOL'
          export async function onRequest(context) {
            const { request, next } = context;
            const url = new URL(request.url);
            
            // Let assets and API routes pass through
            if (url.pathname.startsWith('/_next/') || 
                url.pathname.startsWith('/api/') ||
                url.pathname.includes('.')) {
              return await next();
            }
            
            // For other routes, check if there's a static file
            try {
              return await next();
            } catch (err) {
              // If no static file, serve index.html for client-side routing
              url.pathname = '/';
              const response = await context.env.ASSETS.fetch(url);
              return response;
            }
          }
          EOL
          
          # Deploy to Cloudflare Pages
          wrangler pages deploy .next --project-name=market --commit-dirty=true -v 